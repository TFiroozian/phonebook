// Code generated by MockGen. DO NOT EDIT.
// Source: models/tmpl/interface.go

// Package mock_tmpl is a generated GoMock package.
package mock_tmpl

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	tmpl "github.com/tfiroozian/phonebook/go/models/tmpl"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// SelectContactWithId mocks base method
func (m *MockDataStore) SelectContactWithId(c context.Context, contactId int64) (*tmpl.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContactWithId", c, contactId)
	ret0, _ := ret[0].(*tmpl.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContactWithId indicates an expected call of SelectContactWithId
func (mr *MockDataStoreMockRecorder) SelectContactWithId(c, contactId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContactWithId", reflect.TypeOf((*MockDataStore)(nil).SelectContactWithId), c, contactId)
}

// SelectContact mocks base method
func (m *MockDataStore) SelectContact(c context.Context, firstName, lastName, phoneNumber, email string) (*[]tmpl.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContact", c, firstName, lastName, phoneNumber, email)
	ret0, _ := ret[0].(*[]tmpl.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContact indicates an expected call of SelectContact
func (mr *MockDataStoreMockRecorder) SelectContact(c, firstName, lastName, phoneNumber, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContact", reflect.TypeOf((*MockDataStore)(nil).SelectContact), c, firstName, lastName, phoneNumber, email)
}

// DeleteContactWithId mocks base method
func (m *MockDataStore) DeleteContactWithId(c context.Context, contactId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactWithId", c, contactId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContactWithId indicates an expected call of DeleteContactWithId
func (mr *MockDataStoreMockRecorder) DeleteContactWithId(c, contactId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactWithId", reflect.TypeOf((*MockDataStore)(nil).DeleteContactWithId), c, contactId)
}

// InsertContact mocks base method
func (m *MockDataStore) InsertContact(c context.Context, firstName, lastName, phoneNumber, email string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContact", c, firstName, lastName, phoneNumber, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertContact indicates an expected call of InsertContact
func (mr *MockDataStoreMockRecorder) InsertContact(c, firstName, lastName, phoneNumber, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContact", reflect.TypeOf((*MockDataStore)(nil).InsertContact), c, firstName, lastName, phoneNumber, email)
}

// UpdateContact mocks base method
func (m *MockDataStore) UpdateContact(c context.Context, id int64, firstName, lastName, phoneNumber, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", c, id, firstName, lastName, phoneNumber, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact
func (mr *MockDataStoreMockRecorder) UpdateContact(c, id, firstName, lastName, phoneNumber, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockDataStore)(nil).UpdateContact), c, id, firstName, lastName, phoneNumber, email)
}
